# Bibliotecas essenciais
import requests  # Faz requisi√ß√µes HTTP para obter os cabe√ßalhos dos sites
import json      # Manipula dados em formato JSON para exporta√ß√£o e an√°lise
import os        # Acessa vari√°veis de ambiente como chaves de API
import argparse  # Lida com argumentos de linha de comando
from typing import Dict, List, Tuple
from openai import OpenAI  # Cliente para interagir com modelos de linguagem

# Classe principal para an√°lise de cabe√ßalhos de seguran√ßa
class AnalisadorCabecalhosSeguranca:
    def __init__(self, chave_api: str = None, url_base: str = None, modelo: str = None):
        self.chave_api = chave_api or os.getenv('OPENROUTER_API_KEY') or os.getenv('OPENAI_API_KEY')
        self.url_base = url_base or os.getenv('OPENROUTER_BASE_URL', "https://openrouter.ai/api/v1")
        self.modelo = modelo or os.getenv('LLM_MODEL', 'deepseek/deepseek-chat-v3.1:free')
        if not self.chave_api:
            raise ValueError("A chave da API √© obrigat√≥ria. Defina OPENROUTER_API_KEY ou use --api-key")
        self.cliente = OpenAI(base_url=self.url_base, api_key=self.chave_api)

    def buscar_cabecalhos(self, url: str, tempo_limite: int = 10) -> Tuple[Dict[str, str], int]:
        """Busca os cabe√ßalhos HTTP de uma URL"""
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        try:
            resposta = requests.get(url, timeout=tempo_limite, allow_redirects=True)
            return dict(resposta.headers), resposta.status_code
        except requests.exceptions.RequestException as erro:
            print(f"Erro ao buscar {url}: {erro}")
            return {}, 0

    def analisar_cabecalhos(self, url: str, cabecalhos: Dict[str, str], status: int) -> str:
        """Analisa os cabe√ßalhos usando IA"""
        prompt = f"""Analise os cabe√ßalhos de seguran√ßa HTTP para o site {url} (Status: {status})
Cabe√ßalhos:
{json.dumps(cabecalhos, indent=2)}

Forne√ßa uma an√°lise de seguran√ßa completa incluindo:

1. Pontua√ß√£o de seguran√ßa (de 0 a 100) e avalia√ß√£o geral
2. Problemas cr√≠ticos de seguran√ßa que exigem aten√ß√£o imediata
3. Cabe√ßalhos importantes que est√£o ausentes
4. An√°lise dos cabe√ßalhos existentes e sua efic√°cia
5. Recomenda√ß√µes espec√≠ficas para melhorias
6. Riscos potenciais com base na configura√ß√£o atual

Foque em conselhos pr√°ticos e acion√°veis, seguindo as melhores pr√°ticas atuais de seguran√ßa na web.
Por favor, n√£o utilize ** ou # na resposta, exceto quando forem realmente necess√°rios para refer√™ncias espec√≠ficas.
Use n√∫meros, algarismos romanos ou letras para organizar o conte√∫do. Formate a resposta de forma clara e bem estruturada."""

        try:
            resposta = self.cliente.chat.completions.create(
                model=self.modelo,
                messages=[{"role": "user", "content": prompt}],
                temperature=0.2
            )
            return resposta.choices[0].message.content
        except Exception as erro:
            return f"Falha na an√°lise: {erro}"

    def analisar_url(self, url: str, tempo_limite: int = 10) -> Dict:
        """Analisa uma √∫nica URL"""
        print(f"\nüîç Analisando: {url}")
        print("-" * 50)

        cabecalhos, status = self.buscar_cabecalhos(url, tempo_limite)
        if not cabecalhos:
            return {"url": url, "erro": "Falha ao buscar cabe√ßalhos"}

        print(f"C√≥digo de status: {status}")
        print(f"\nCabe√ßalhos HTTP ({len(cabecalhos)} encontrados):")
        print("-" * 30)
        for chave, valor in cabecalhos.items():
            print(f"{chave}: {valor}")

        print(f"\nüß† Analisando com IA...")
        analise = self.analisar_cabecalhos(url, cabecalhos, status)

        print("\nüîê AN√ÅLISE DE SEGURAN√áA")
        print("=" * 50)
        print(analise)

        return {
            "url": url,
            "codigo_status": status,
            "quantidade_cabecalhos": len(cabecalhos),
            "analise": analise,
            "cabecalhos_brutos": cabecalhos
        }

    def analisar_varias_urls(self, lista_urls: List[str], tempo_limite: int = 10) -> List[Dict]:
        """Analisa v√°rias URLs em sequ√™ncia"""
        resultados = []
        for i, url in enumerate(lista_urls, 1):
            print(f"\n[{i}/{len(lista_urls)}]")
            resultado = self.analisar_url(url, tempo_limite)
            resultados.append(resultado)
        return resultados

    def exportar_resultados(self, resultados: List[Dict], nome_arquivo: str):
        """Exporta os resultados para um arquivo JSON"""
        with open(nome_arquivo, 'w') as f:
            json.dump(resultados, f, indent=2, ensure_ascii=False)
        print(f"\nüìÅ Resultados exportados para: {nome_arquivo}")

# Fun√ß√£o principal que lida com argumentos de linha de comando
def principal():
    parser = argparse.ArgumentParser(
        description='üîç Analisa cabe√ßalhos de seguran√ßa HTTP usando IA',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''Exemplos:
  python cabecalhos_seg.py https://exemplo.com
  python cabecalhos_seg.py exemplo.com google.com
  python cabecalhos_seg.py exemplo.com --exportar resultados.json

Vari√°veis de ambiente:
  OPENROUTER_API_KEY - Chave da API do OpenRouter
  OPENAI_API_KEY - Chave da API do OpenAI
  LLM_MODEL - Modelo a ser usado (padr√£o: deepseek/deepseek-chat-v3.1:free)'''
    )

    parser.add_argument('urls', nargs='+', help='URLs para analisar')
    parser.add_argument('--api-key', help='Chave da API para o servi√ßo de IA')
    parser.add_argument('--base-url', help='URL base da API de IA')
    parser.add_argument('--model', help='Modelo de IA a ser usado')
    parser.add_argument('--timeout', type=int, default=10, help='Tempo limite da requisi√ß√£o (padr√£o: 10s)')
    parser.add_argument('--exportar', help='Exporta os resultados para um arquivo JSON')

    args = parser.parse_args()

    try:
        analisador = AnalisadorCabecalhosSeguranca(
            chave_api=args.api_key,
            url_base=args.base_url,
            modelo=args.model
        )

        resultados = analisador.analisar_varias_urls(args.urls, args.timeout)

        if args.exportar:
            analisador.exportar_resultados(resultados, args.exportar)

    except ValueError as erro:
        print(f"‚ùå Erro: {erro}")
        return 1
    except KeyboardInterrupt:
        print("\n‚õî An√°lise interrompida pelo usu√°rio")
        return 1

# Ponto de entrada do script
if __name__ == '__main__':
    principal()
